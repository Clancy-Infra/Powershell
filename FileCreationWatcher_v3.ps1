<#
 FileCreationWatcher.ps1
 
 Created by Komeil Sholeh
 Modified by Simon Treen

 Watches a specified folder for any files created matching the filter
 once a file has been created it copies the file to a new location
 and renames it with a date/time stamp to maintain uniqueness
 Used for Purchase Ledger BACS payment files generated by IFS to be copied
 to the INPUT folder being watched by the PT-X Encryption service

 Basic logging is carried out and can be found in the logfile destination
#>

# Declare
$folder = 'R:\TestPTX\IFS'
$filter = '*.*'                             
$destination = 'R:\TestPTX\PTX\INPUT'
$logFile = "R:\TestPTX\Script\FSW.csv"
$global:path = $null
$global:file2path = $null
$global:timestamp = $null
$global:name = $null
$global:deletefilepath = $null

# Instantiate the FSW object
$fsw = New-Object IO.FileSystemWatcher 
$fsw.Path = $folder
$fsw.Filter = $filter
$fsw.IncludeSubdirectories = $false
$fsw.EnableRaisingEvents = $true

# Instantiate a timer object
$timer = New-Object System.Timers.Timer
$timer.Interval = 2000
$timer.AutoReset = $false
$timer.Enabled = $false

# Instantiate another timer
$deletetimer = New-Object System.Timers.Timer
$deletetimer.Interval = 2000
$deletetimer.AutoReset = $false
$deletetimer.Enabled = $false

# Define the log file
$logfilePath = (Test-Path $logFile)
    if (($logFilePath) -ne "True")
    {
        # Create CSV File and Headers
        New-Item $logfile -ItemType File
    }


# Register the event watcher for the Created event and define the action when the event is detected
Register-ObjectEvent $fsw Created -SourceIdentifier FileCreated -Action {
 
 # Define the file path and name
 $global:path = $Event.SourceEventArgs.FullPath
 $global:name = $Event.SourceEventArgs.Name
 $changeType = $Event.SourceEventArgs.ChangeType
 $global:timeStamp = $Event.TimeGenerated
 $newName = [System.IO.Path]::GetFileNameWithoutExtension($global:path) + '_' + (Get-Date -Format 'yyyyMMddTHHmmss')
 $fileExtension = [System.IO.Path]::GetExtension($global:path)
 $global:file2path = $destination + "\" + $newName + $fileExtension
 $timer.start()
}

# Register the timer elapsed event to start the file copy process 
Register-ObjectEvent $timer Elapsed -SourceIdentifier TimerEvent -Action {
 try
  {
     Copy-Item -path $global:path -Destination $global:file2path -Force -Verbose -ErrorAction Stop
     Add-Content $logfile "File copied on create $global:timeStamp,$global:name,"
     deleteFile($global:path)
  }
 catch
  {
     Add-Content $logfile "Failed to copy file $global:timeStamp,$global:name $($_.Exception.Message)"
     $timer.Start()
  }
 }

# Register the timer elapsed event for the file delete process
 Register-ObjectEvent $deletetimer Elapsed -SourceIdentifier DeleteTimerEvent {
     deleteFile($global:deletefilepath)
}

# File deletion
 function deleteFile ($global:deletefilepath)
 {
    try
    {
        Remove-Item -Path $global:deletefilepath -ErrorAction Stop
        Add-Content $logfile "Deleted file $global:deletefilepath"
    }
    catch
    {
        Add-Content $logfile "Failed to delete file $global:deletefilepath $($_.Exception.Message)"
        $deletetimer.start()
    }
 }